public List<String> findAndReplacePattern(String[] words, String pattern) {
        List<String> result = new ArrayList<>();
        for(String word : words) {
            if(matchFound(word, pattern)) {
                result.add(word);
            }
        }

        return result;
    }

    private boolean matchFound(String word, String pattern) {
        if(word.length() != pattern.length()) {
            return false;
        }

        //int[] wordToPattern = new int[26];
        //int[] patternToWord = new int[26];

        Map<Character, Character> wordToPattern = new HashMap<>();
        Map<Character, Character> patternToWord = new HashMap<>();


        for(int i=0; i<word.length(); i++) {
            char fromWord = word.charAt(i);
            char fromPattern = pattern.charAt(i);

            if(wordToPattern.containsKey(fromWord) && wordToPattern.get(fromWord) != fromPattern) {
                return false;
            }

            if(patternToWord.containsKey(fromPattern) && patternToWord.get(fromPattern) != fromWord) {
                return false;
            }

            patternToWord.putIfAbsent(fromPattern, fromWord);
            wordToPattern.putIfAbsent(fromWord, fromPattern);
        }

        return true;

    }
